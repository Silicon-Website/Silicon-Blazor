@page "/account/notifications"
@using System.Net.Http.Json
@inject Microsoft.AspNetCore.Identity.UserManager<ApplicationUser> UserManager
@inject Microsoft.AspNetCore.Identity.SignInManager<ApplicationUser> SignInManager
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer

<PageTitle>Notifications</PageTitle>

<h2>Notifications</h2>


    <span class="success-message">@StatusMessage</span>

    <div class="content">

        <div>
            <div>
                <InputCheckbox id="toggle" @bind-Value="IsSubscribed" @onclick="ToggleSubscription" />
                <label class="slider round" for="toggle"></label>
            </div>
        </div>

        <div class="description">
            <h6>Subscribe to Newsletter</h6>
            <p class="text-s">Nec, posuere non felis duis massa vitae aliquet interdum scelerisque. Neque ullamcorper.</p>
        </div>
    </div>

@code {
    public bool IsSubscribed { get; set; } = false;

    private string? StatusMessage { get; set; }
    private SubscriberEntity Subscriber = new SubscriberEntity();

    [CascadingParameter]
    private ApplicationUser user { get; set; } = default!;

    [CascadingParameter]
    private HttpContext httpContext { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {

        if (user != null)
        {
            var response = await Http.GetFromJsonAsync<SubscriberEntity>($"https://webapi-win23jsbackend-sarahtibblin.azurewebsites.net/api/Subscribe/{user.Email}");
            if (response != null)
            {
                IsSubscribed = true;
            }
        }
    }

    private async Task ToggleSubscription()
    {
        //Problem med att httpContext = null, vet ej varför..
       var user = await UserManager.GetUserAsync(httpContext.User);

        if (user != null)
        {
            IsSubscribed = !IsSubscribed;

            if (IsSubscribed)
            {
                var entity = new SubscriberEntity { Email = user.Email, DailyNewsLetter = true };
                var response = await Http.PostAsJsonAsync("https://webapi-win23jsbackend-sarahtibblin.azurewebsites.net/api/Subscribe", entity);
                if (!response.IsSuccessStatusCode)
                {
                    StatusMessage = "Subscribed successfully";
                }
            }
            else
            {
                var response = await Http.DeleteAsync($"https://webapi-win23jsbackend-sarahtibblin.azurewebsites.net/api/Subscribe/{user.Email}");
                if (!response.IsSuccessStatusCode)
                {
                    StatusMessage = "Unsubscribed successfully";
                }
            }
        }
    }
    public class SubscriberEntity
    {
        public string Email { get; set; } = null!;

        public bool DailyNewsLetter { get; set; }
    }

}