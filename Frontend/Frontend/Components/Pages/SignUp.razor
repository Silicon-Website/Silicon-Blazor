@page "/signup"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Frontend.Data
@using Microsoft.EntityFrameworkCore
@using Silicon_Website_App.Helpers

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<SignUp> Logger
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

    <section id="signup-section">

        <div class="container">

        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="signup" novalidate>
                <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">
                    @ErrorMessage
                </div>
            }

            <div class="title">

                <h1>Create Account</h1>
                <p class="text-m">Already have an account?<a href="/signin"> Sign in here.</a></p>

            </div>

            <div class="form-content">

                <div class="top-group">

                    <div class="input-group semi-bold">
                        <label>FirstName</label>
                        <InputText @bind-Value="Input.FirstName" autocomplete="name" aria-required="true" placeholder="Enter your first name" />
                        <ValidationMessage For="() => Input.FirstName" />
                    </div>

                    <div class="input-group semi-bold">
                        <label>LastName</label>
                        <InputText @bind-Value="Input.LastName" autocomplete="surname" aria-required="true" placeholder="Enter your last name" />
                        <ValidationMessage For="() => Input.LastName" />
                    </div>

                </div>

                <div class="input-group semi-bold">
                    <label>Email</label>
                    <InputText type="email" @bind-Value="Input.Email" autocomplete="email" aria-required="true" placeholder="Enter your email address" />
                    <ValidationMessage For="() => Input.Email" />
                </div>

                <div class="input-group semi-bold">
                    <label>Password</label>
                    <InputText type="password" @bind-Value="Input.Password" autocomplete="password" aria-required="true" placeholder="********" />
                    <ValidationMessage For="() => Input.Password" />
                </div>

                <div class="input-group semi-bold">
                    <label>Confirm password</label>
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" autocomplete="confirmpassword" aria-required="true" placeholder="********" />
                    <ValidationMessage For="() => Input.ConfirmPassword" />
                </div>

                <div>
                    <InputCheckbox id="checkbox" @bind-Value="Input.Terms" aria-required="true" />
                    <label> I agree to the <a href="terms-and-conditions">Terms</a> & <a href="terms-and-conditions">Conditions</a>.</label>
                    <ValidationMessage For="() => Input.Terms" />
                </div>

                <button type="submit" class="menu-link btn-theme-s">Sign up</button>

            </div>

            </EditForm>

        </div>

    </section>

@code {

    private string? ErrorMessage { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = new ApplicationUser { 

            FirstName = Input.FirstName,
            LastName = Input.LastName,
            UserName = Input.Email, 
            Email = Input.Email
        };

        if ( await UserManager.Users.AnyAsync(x => x.Email == user.Email))
        {
            ErrorMessage = "Email already exists.";
            return;
        }

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo(ReturnUrl ?? "/");
    }

    private sealed class InputModel
    {

        [Display(Name = "First name", Order = 0)]
        [Required(ErrorMessage = "Firstname is required")]
        public string FirstName { get; set; } = null!;

        [Display(Name = "Last name", Order = 1)]
        [Required(ErrorMessage = "Lastname is required")]
        public string LastName { get; set; } = null!;

        [Required(ErrorMessage = "Email is required")]
        [DataType(DataType.EmailAddress)]
        [RegularExpression(@"\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z",
        ErrorMessage = "Invalid email address")]
        [Display(Name = "Email address", Prompt = "Enter your email address", Order = 2)]
        public string Email { get; set; } = null!;

        [DataType(DataType.Password)]
        [Display(Name = "Password", Prompt = "Enter your password", Order = 3)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[#$^+=!*()@%&]).{8,}$",
        ErrorMessage = "Invalid password")]
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = null!;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password", Prompt = "Confirm your password", Order = 4)]
        [Compare(nameof(Password), ErrorMessage = "Password does not match")]
        [Required(ErrorMessage = "You have to confirm your password")]
        public string ConfirmPassword { get; set; } = null!;

        [Display(Name = "I agree to the Terms & Conditions", Order = 5)]
        [CheckBoxRequired(ErrorMessage = "Terms & Conditions must be checked")]
        public bool Terms{ get; set; } = false;
    }
}
