@page "/account/details"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Frontend.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<PageTitle>Account Details</PageTitle>


<EditForm Model="BasicInfo" OnValidSubmit="OnValidSubmitAsync" method="post">

    <div class="basic-info">
        <span class="success-message">@StatusMessage</span>

        <div class="title">
            <h1>Account Details</h1>
            <h5>Basic Info</h5>
        </div>

        <div class="input-group">
            <div class="input">
                <label for="FirstName">First Name</label>
                <InputText id="FirstName" @bind-Value="BasicInfo.FirstName" placeholder="Enter your first name" />
                <span class="text-danger"><ValidationMessage For="() => BasicInfo.FirstName"/></span>
            </div>

            <div class="input">
                <label for="LastName">Last Name</label>
                <InputText id="LastName" @bind-Value="BasicInfo.LastName" placeholder="Enter your last name" />
                <span class="text-danger"><ValidationMessage For="() => BasicInfo.LastName"/></span>
            </div>
        </div>

        <div class="input-group">
            <div class="input">
                <label for="Email">Email</label>
                <InputText id="Email" @bind-Value="BasicInfo.Email" placeholder="Enter your email address" />
                <span class="text-danger"><ValidationMessage For="() => BasicInfo.Email"/></span>
            </div>

            <div class="input">
                <label for="PhoneNumber">Phone Number</label>
                <InputText id="PhoneNumber" @bind-Value="BasicInfo.PhoneNumber" placeholder="Enter your phone number" />
            </div>
        </div>

        <div class="input-group">
            <div class="input">
                <label for="Bio">Bio (optional)</label>
                <InputTextArea id="Bio" @bind-Value="BasicInfo.Bio" rows="4" cols="50" placeholder="Add a short bio..."></InputTextArea>
            </div>
        </div>

        <div class="btn-box">
            <button type="reset" class="menu-link btn-gray">Cancel</button>
            <button type="submit" class="menu-link btn-theme-s">Save changes</button>
        </div>
    </div>
</EditForm>

<EditForm Model="AddressInfo" OnValidSubmit="OnValidSubmitAsync" method="post">

    <div class="address">

        <h5>Address</h5>

        <div class="input-group">

            <div class="input">
                <label asp-for="AddressInfo!.AddressLine_1"></label>
                <InputText asp-for="AddressInfo!.AddressLine_1" @bind-Value="AddressInfo!.AddressLine_1" placeholder="Enter your address line" />
                <span class="text-danger"><ValidationMessage For="() => AddressInfo.AddressLine_1" /></span>
            </div>

        </div>

        <div class="input-group">

            <div class="input">
                <div>
                    <label asp-for="AddressInfo!.AddressLine_2"></label><span> (optional)</span>
                </div>
                <InputText asp-for="AddressInfo!.AddressLine_2" @bind-Value="AddressInfo!.AddressLine_2" placeholder="Enter your second address line" />
                <span class="text-danger"><ValidationMessage For="() => AddressInfo.AddressLine_2" /></span>
            </div>

        </div>

        <div class="input-group">

            <div class="input">
                <label asp-for="AddressInfo!.PostalCode"></label>
                <InputText asp-for="AddressInfo!.PostalCode" @bind-Value="AddressInfo!.PostalCode" placeholder="Enter your postal code" />
                <span class="text-danger"><ValidationMessage For="() => AddressInfo.PostalCode" /></span>
            </div>

            <div class="input">
                <label asp-for="AddressInfo!.City"></label>
                <InputText asp-for="AddressInfo!.City" @bind-Value="AddressInfo!.City" placeholder="Enter your city" />
            </div>

        </div>

        <div class="btn-box">

            <button type="reset" class="menu-link btn-gray">Cancel</button>

            <button type="submit" class="menu-link btn-theme-s">Save changes</button>

        </div>

    </div>

</EditForm>

@code {
    private ApplicationUser user = default!;
    private string? StatusMessage { get; set; }
    private string? Email;
    private string? PhoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private BasicInfoModel BasicInfo = new BasicInfoModel();
    private AddressInfoModel AddressInfo = new AddressInfoModel();

    public class BasicInfoModel
    {

        [Display(Name = "First name", Prompt = "Enter your first name", Order = 0)]
        [Required(ErrorMessage = "Firstname is required")]
        public string FirstName { get; set; } = null!;


        [Display(Name = "Last name", Prompt = "Enter your last name", Order = 1)]
        [Required(ErrorMessage = "Lastname is required")]
        public string LastName { get; set; } = null!;


        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email address", Prompt = "Enter your email address", Order = 2)]
        [RegularExpression(@"\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z",
        ErrorMessage = "Invalid email address")]
        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; } = null!;

        [Display(Name = "Phone", Prompt = "Enter your phone", Order = 3)]
        public string? PhoneNumber { get; set; }

        [Display(Name = "Bio", Prompt = "Add a short bio...", Order = 4)]
        public string? Bio { get; set; }


    }

    public class AddressInfoModel
    {

        [Display(Name = "Address line 1", Prompt = "Enter your address line", Order = 0)]
        [Required(ErrorMessage = "Address is required")]
        public string AddressLine_1 { get; set; } = null!;

        [Display(Name = "Address line 2", Prompt = "Enter your second address line", Order = 1)]
        public string? AddressLine_2 { get; set; }

        [Display(Name = "Postal code", Prompt = "Enter your postal code", Order = 2)]
        [Required(ErrorMessage = "Postal code is required")]
        public string PostalCode { get; set; } = null!;

        [Display(Name = "City", Prompt = "Enter your city", Order = 3)]
        [Required(ErrorMessage = "City is required")]
        public string City { get; set; } = null!;
    }

    protected override async Task OnInitializedAsync()
    {
        using (var dbContext = new ApplicationDbContext(null))
        {
            var user = await UserManager.GetUserAsync(HttpContext.User);
            Email = await UserManager.GetUserNameAsync(user);
            PhoneNumber = await UserManager.GetPhoneNumberAsync(user);

            Input.PhoneNumber ??= PhoneNumber;
        }

    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.GetUserAsync(HttpContext.User);

        if (user != null)
        {
            user.FirstName = BasicInfo.FirstName;
            user.LastName = BasicInfo.LastName;
            user.Email = BasicInfo.Email;
            user.PhoneNumber = BasicInfo.PhoneNumber;
            user.Bio = BasicInfo.Bio;
            user.Address.AddressLine_1 = AddressInfo.AddressLine_1;
            user.Address.AddressLine_2 = AddressInfo.AddressLine_2;
            user.Address.PostalCode = AddressInfo.PostalCode;
            user.Address.City = AddressInfo.City;

            var result = await UserManager.UpdateAsync(user);

            if (result.Succeeded)
            {
                StatusMessage = "Your profile has been updated";
            }
            else
            {
                StatusMessage = "Failed to update profile";
            }
        }

        await SignInManager.RefreshSignInAsync(user);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
