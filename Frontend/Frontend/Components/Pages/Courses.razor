@page "/courses"
@using GraphQL
@using System.Text.Json.Serialization
@using System.Text.Json
@using static System.Net.WebRequestMethods
@attribute [StreamRendering]
@attribute [Authorize]
@inject HttpClient Http
<PageTitle>Courses</PageTitle>

@* Måste köra CourseProvider lokalt, samt Frontend måste köras lokalt också för att få det att fungera. fungerar ej genom Azure.. *@
@* Bilder laddas ej, dom är kopplade genom Azure Account container, och vill ej laddas där ifrån. Vet ej varför.. *@

<section class="courses">
    <div class="container">
        <div class="header">
            <h1>Courses</h1>
            <form id="form-filters">
                <select class="input-search-group">
                    <option>All categories</option>
                </select>
                <div class="input-search-group">
                    <input id="searchQuery" name="SearchQuery" placeholder="Search courses" />
                    <i class="fa-regular fa-search"></i>
                </div>
            </form>
        </div>

        <div class="course-items">
            @if (courses == null)
            {
                <p><em>No courses found. Please wait...</em></p>
            }
            else
            {

                @foreach (var course in courses)
                {
                    <div class="course">
                        <a asp-action="Details" asp-controller="Courses" asp-route-id="@course.Id">
                            @if (course.IsBestSeller)
                            {
                                <div class="bestseller">Best Seller</div>
                            }
                            <button class="btn-box btn-circle bookmark"><i class="fa-regular fa-bookmark">d</i></button>
                            <img src="@course.Image" alt="@course.Title" />
                            <div class="content">
                                <h5 class="title">@course.Title</h5>
                                <p class="author">@course.Author</p>
                                <div class="pricing">
                                    @if (!string.IsNullOrEmpty(course.DiscountPrice))
                                    {
                                        <div class="discount">@course.DiscountPrice</div>
                                    }
                                    <div class="original @(!string.IsNullOrEmpty(course.DiscountPrice)? "discount-enabled" : "")">@course.Price</div>
                                </div>
                                <div class="footer">
                                    <div class="hours">
                                        <i class="fa-regular fa-clock"></i> @course.Hours hours
                                    </div>
                                    <div class="likes">
                                        <i class="fa-regular fa-thumbs-up"></i>@course.LikesInProcent (@course.LikesInNumbers)
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                }

            }
        </div>
    </div>
</section>


@code {

    private List<CourseEntity> courses;


    protected override async Task OnInitializedAsync()
    {

        var query = new GraphQLRequest
            {
                Query = "{ getCourses { id isBestSeller image title author price discountPrice hours likesInProcent likesInNumbers } }"
            };
        var response = await Http.PostAsJsonAsync("http://localhost:7268/api/graphql", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            courses = result.Data.GetProperty("getCourses").EnumerateArray()
                .Select(course => new CourseEntity
                    {
                        Id = course.GetProperty("id").GetInt32(),
                        IsBestSeller = course.GetProperty("isBestSeller").GetBoolean(),
                        Image = course.GetProperty("image").GetString(),
                        Title = course.GetProperty("title").GetString(),
                        Author = course.GetProperty("author").GetString(),
                        Price = course.GetProperty("price").GetString(),
                        DiscountPrice = course.GetProperty("discountPrice").GetString(),
                        Hours = course.GetProperty("hours").GetString(),
                        LikesInProcent = course.GetProperty("likesInProcent").GetString(),
                        LikesInNumbers = course.GetProperty("likesInNumbers").GetString()
                    })
                .ToList();
        }

    }

    public class DynamicGraphQLResponse
    {
        [JsonPropertyName("data")]
        public JsonElement Data { get; set; }
    }

    private class CourseEntity
    {
        public int Id { get; set; }

        public bool IsBestSeller { get; set; }

        public string Image { get; set; } = null!;

        public string Title { get; set; } = null!;

        public string Author { get; set; } = null!;

        public string Price { get; set; } = null!;

        public string? DiscountPrice { get; set; }

        public string Hours { get; set; } = null!;

        public string LikesInProcent { get; set; } = null!;

        public string LikesInNumbers { get; set; } = null!;
    }

}
